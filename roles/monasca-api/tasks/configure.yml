---
# Â©Copyright 2015 Hewlett-Packard Development Company, L.P.

- name: setup group
  group: name={{monasca_group}} system=yes

- name: Setup user
  user: name={{monasca_api_user}} system=yes group={{monasca_group}}

- name: Detect if this is a systemd based system
  command: cat /proc/1/comm
  register: init

- set_fact: use_systemd=True
  when: init.stdout == 'systemd'

- set_fact: use_systemd=False
  when: init.stdout != 'systemd'

- name: check if firewalld
  command: /usr/bin/systemctl status firewalld
  ignore_errors: yes
  register: firewalld
  when: use_systemd

- name: Set firewalld rule
  firewalld: port="{{ item }}/tcp" permanent=true state=enabled
  with_items:
    - "{{ monasca_api_client_port }}"
  notify:
    - restart firewalld
  when: firewalld is defined and firewalld.rc == 0

- name: Check if ports are allowed
  shell: iptables -L | grep -q "Allow_tcp_{{item}}"
  with_items:
    - "{{ monasca_api_client_port }}"
  register: check_allow_tcp
  ignore_errors: yes
  changed_when: no
  always_run: yes
  when: not use_systemd or (firewalld is not defined or firewalld.rc != 0)

- name: Allow ports
  command: >
    iptables -A INPUT -p tcp -m tcp --dport {{item.item}} -m comment --comment "Allow_tcp_{{item.item}}" -j ACCEPT
  with_items: check_allow_tcp.results
  notify:
    - save iptables
  when: (not use_systemd or firewalld is not defined or firewalld.rc != 0) and item.rc != 0

- name: create systemd config
  template: dest={{api_systemd_service}} owner=root group=root mode=644 src=monasca-api.service.j2
  notify:
    - restart monasca-api
  when: use_systemd

- command: systemctl daemon-reload
  when: use_systemd

- name: create upstart script from template
  template: dest={{ api_upstart_service }} owner=root group=root mode=744 src=monasca-api.conf.j2
  notify:
    - restart monasca-api
  when: not use_systemd

- name: create monasca log dir
  file: path={{monasca_log_dir}} state=directory owner=root group={{monasca_group}} mode=775

- name: create api log dir
  file: path={{api_log_dir}} state=directory owner=root group={{monasca_group}} mode=775

- name: create conf_dir
  file: path={{monasca_conf_dir}} state=directory owner=root group={{monasca_group}} mode=775

- name: create api-config.ini from template
  template: dest={{api_wsgi_file}} owner={{monasca_api_user}} group={{monasca_group}} mode=640 src=api-config.ini.j2
  notify:
    - restart monasca-api

- name: create api-config.conf from template
  template: dest={{api_conf_file}} owner={{monasca_api_user}} group={{monasca_group}} mode=640 src=api-config.conf.j2
  notify:
    - restart monasca-api

- name: create api-logging.conf from template
  template: dest={{api_conf_logging}} owner={{monasca_api_user}} group={{monasca_group}} mode=640 src=api-logging.conf.j2
  notify:
    - restart monasca-api

- meta: flush_handlers
